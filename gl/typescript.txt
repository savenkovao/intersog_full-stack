https://metanit.com/web/typescript/2.1.php

Объявление переменных и констант

Для определения переменных, как в JavaScript, можно использовать ключевое слово var:
var x = "hello";
console.log(x);
var x = "work"; //переопределение
console.log(x);

Применение let является более предпочтительным, поскольку позволяет избежать ряд проблем, связанных с объявлением переменных. 

let x = "hello";
console.log(x);
let x = "work"; // здесь будет ошибка, так как переменная x уже объявлена
console.log(x);

let
У объявлений переменной через let есть три основных отличия от var:
1) Область видимости переменной let – блок {...}
При объявлении внутри цикла переменная i будет видна только в блоке цикла.

2) Переменная let видна только после объявления.
alert(a); // undefined
var a = 5;
__________________________________________
alert(a); // ошибка, нет такой переменной
let a = 5;
Заметим также, что переменные let нельзя повторно объявлять

3)При использовании в цикле, для каждой итерации создаётся своя переменная.

Каждому повторению цикла соответствует своя независимая переменная let. Если внутри цикла есть вложенные объявления функций,
то в замыкании каждой будет та переменная, которая была при соответствующей итерации. Объявление let i создаёт
для каждого повторения блока в цикле свою переменную, которую функция и получает из замыкания в последних строках.




Кроме переменных в TypeScript имеются константы - для них можно установить значение только один раз.
И далее процессе работы программы мы уже не сможем изменить это значение. Для определение констант используется ключевое
слово const, которое также было добавлено в ECMAScript 6:

const z = 6;
z = 8;  // здесь ошибка - нельзя изменить значение константы z




________________________________________________________________________________________
Типы данных

TypeScript является строго типизированным языком, и каждая переменная и константа в нем имеет определенный тип.
При этом в отличие от javascript мы не можем динамически изменить ранее указанный тип переменной.

В TypeScript имеются следующие базовые типы:

Boolean: логическое значение true или false
Number: числовое значение
String: строки
Array: массивы
Tuple: кортежи
Enum: перечисления
Any: произвольный тип
Null и undefined: соответствуют значениям null и undefined в javascript
Void: отсутствие конкретного типа

Большинство из этих типов соотносятся с примитивными типами из JavaScript.

Для установки типа применяется знак двоеточия. Примеры создания переменных:
let x: number = 10; 
let hello: string = "hello world";
let isValid: boolean = true;

Если же переменная определяется без значения, и только впоследствии при работе программы
ей присваивается значение, тогда считается, что она имеет тип any:

let x;  // тип any
x = 10; 

Boolean

Тип Boolean представляет логическое значение true или false:

let isEnabled = true;
let isAlive: boolean = false;
 
console.log(isEnabled);
console.log(isAlive);


Number

Тип Number представляет числа, причем в дополнение к десятичной и шестнадцатиричной записи чисел TypeScript поддерживает
 также записи чисел в двоичной и восьмеричной системе, которые были добавлены в стандарт ECMAScript 2015:


let decimal: number = 6;
let hex: number = 0xf00d;
let binary: number = 0b1010;
let octal: number = 0o744;



String

String представляет строки. Как и в JavaScript, в TypeScript строки можно заключать в двойные, либо в ординарные кавычки:

let firstName: string = "Tom";
let lastName = 'Johns';
TypeScript поддерживает такую функциональность, как шаблоны строк, то есть мы можем задать шаблон в косых кавычках (`),
как если бы мы писали обычную строку, и затем в саму строку можно встраивать разные выражения
с помощью синтаксиса ${ expr }, где expr - это выражение. Например:


let firstName: string = "Tom";
let age: number = 28;
let info: string = `Имя ${firstName}    Возраст: ${age}`;
console.log(info);  // Имя Tom    Возраст: 28



Массивы

Массивы определяются с помощью выражения [] и также являются строго типизированными.
То есть если изначально массив содержит строки, то в будущем он сможет работать только со строками.

let list: number[] = [10, 20, 30];
let colors: string[] = ["red", "green", "blue"];
console.log(list[0]);
console.log(colors[1]);
Альтернативный способ определения массивов представляет применение типа Array<>:

let names: Array<string> = ["Tom", "Bob", "Alice"];
console.log(names[1]);  // Bob


Кортежи

Кортежи (Tuples) также, как и массивы, представляют набор элементов, для которых уже заранее известен тип. Например:

// определение кортежа - кортеж состоит из двух элементов - строки и числа
let userInfo: [string, number];
// инициализация кортежа
userInfo = ["Tom", 28];
// Неправильная инициализация - переданные значения не соответствуют типам по позиции
//userInfo = [28, "Tom"]; // Ошибка
 
// использование кортежа
console.log(userInfo[1]); // 28
userInfo[1] = 37;



Тип enum

Тип enum предназначен для описания набора числовых данных с помощью строковых констант. Так, объявим следующее перечисление:

enum Season { Winter, Spring, Summer, Autumn };
Перечисление называется Season и имеет четыре элемента. Теперь используем перечисление:

enum Season { Winter, Spring, Summer, Autumn };
let current: Season = Season.Summer;
console.log(current);
current = Season.Autumn; // изменение значения
Здесь создается переменная current, которая имеет тип Season. При этом консоль выведет нам число 2.
Так как все элементы перечисления представляют числовые значения. По умолчанию следующие:

enum Season { Winter=0, Spring=1, Summer=2, Autumn=3 };
Хотя мы можем переопределить эти значения:

enum Season { Winter=10, Spring=20, Summer=30, Autumn=40 };
Также мы можем получить непосредственно текстовое значение:


enum Season { Winter=0, Spring=1, Summer=2, Autumn=3 };
var current: string = Season[2];    // 2 - числовое значение Summer
console.log(current);   // Summer




Тип any

Any описывает данные, тип которых может быть неизвестен на момент написания приложения.

let someVar: any = "hello";
console.log(someVar);   // сейчас someVar - это string
someVar = 20; 
console.log(someVar);   // сейчас someVar - это number
Так как здесь применяется тип any, то данный код скомпилируется без ошибок, несмотря на смену строкового значения на числовое.
И также мы можем объявлять массивы данного типа:


var someArray: any[] = [ 24, "Tom", false];



Null и undefined

Как и в JavaScript, в TypeScript есть специальные типы undefined и null, которые принимают соответствующие значения undefined и null:

let a: undefined = undefined;
let b: null = null;
Но фактически мы можем присваивать значения undefined и null переменным других типов, например, number:


let x: number = undefined;
console.log(x);
x = null;
console.log(x);
x = 5;
console.log(x);
В этом плане null и undefined выступают как подтипы других типов и полезны преимущественно в каких-то операциях,
где неизвестен результат - то ли это будет число или строка, то ли это будет null. В этом случае,
чтобы избежать возможной ошибки, мы можем проверить значение на undefined или null, собственно как и в javascript.



Комплексные объекты

Кроме простых переменных, как и в javascript, можно создавать сложные объекты. Например:

let person = {name:"Tom", age:23};
console.log(person.name);
// альтернативный вариант получения свойства
console.log(person["name"]);
Но несмотря на то, что это фактически тот же самый объект, что мы могли бы использовать в JavaScript,
в силу строготипизированности TS мы имеем в данном случае ограничения. В частности,
если у нас будет следующий код:

let person = { name: "Tom", age: 23 };
person = { name: "Alice" };
То на второй строке мы получим ошибку, поскольку компилятор после первой строки предполагает,
что объект person будет иметь два свойства name и age. Должно быть соответствие по названиям,
количеству и типу свойств.