Конфигурационный файл tsconfig.json

tsconfig.json — файл настроек проекта TypeScript. Он содержит в себе пути к файлам и опции, необходимые TypeScript, чтобы успешно скомпилировать проект.

Если TypeScript находит файл tsconfig.json , то он считает директорию, в которой находится этот файл корневой директорией TypeScript проекта.


У файла tsconfig.json есть три основные секции:

compilerOptions — опции компилятора, их полный список вы можете посмотреть на странице опции компилятора ;
files — список файлов, которые должен обработать компилятор, если данная опция не указана, то компилятор обработает все файлы .ts или .tsx которые найдет в корневой директории проекта и во всех поддиректориях;
exclude — список директорий или файлов, которые не должен обработать компилятор TypeScript .
exclude не может использоваться совместно с files, если это произойдёт, то настройка files будет в приоритете.

tsconfig.json может быть пустым, в таком случае включаются все файлы .ts и .tsx в директории и поддиректориях и применяются настройки по умолчанию.

Если компилятор был вызван с опциями, то эти опции замещают указанные в tsconfig.json .

Пример файла tsconfig.json :

{ 
"compilerOptions": { 
      "module": "system",
      "noImplicitAny": true, 
      "removeComments": true, 
      "preserveConstEnums": true, 
      "outFile": "./index.js",
      "sourceMap": true 
    }, 
"exclude": [ 
    "node_modules", 
    "wwwroot" 
] 
}


Давайте разберём этот файл. Начнём с опций компилятора — compilerOptions:

module — определяет какую систему генерации модулей использовать
noImplicitAny — запрещает использование неявного типа any
removeComments — удаляет все комментарии кроме копирайтов, начинающихся с /!*
preserveConstEnums — Не стирает константные объявления enum в сгенерированном коде.
outFile — все файлы объединить в один
sourceMap — сгенерировать sourcemap
Затем добавляем в exclude node_modules и wwwroot . То есть эти папки не будут обработаны компилятором.