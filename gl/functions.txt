Функция-декоратор (функция-обёртка)

Декоратор – приём программирования, который позволяет взять существующую функцию и изменить/расширить ее поведение.
Декоратор получает функцию и возвращает обертку, которая делает что-то своё «вокруг» вызова основной функции.

1) bind – привязка контекста

Один простой декоратор – это функция bind:

function bind(func, context) {
  return function() {
    return func.apply(context, arguments);
  };
}
Вызов bind(func, context) возвращает обёртку, которая ставит this и передаёт основную работу функции func.

Декоратор – это обёртка над функцией, которая модифицирует её поведение. При этом основную работу
по-прежнему выполняет функция. Декораторы можно не только повторно использовать, но и комбинировать!
Это кардинально повышает их выразительную силу. Декораторы можно рассматривать как своего рода «фичи»
или возможности, которые можно «нацепить» на любую функцию. Можно один, а можно несколько.





